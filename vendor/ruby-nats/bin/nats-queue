#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'nats/client'

['TERM', 'INT'].each { |s| trap(s) {  puts; exit! } }

def usage
  puts "Usage: nats-queue <subject> <queue name> [-s server] [-t] [-r]"; exit
end

args = ARGV.dup
opts_parser = OptionParser.new do |opts|
  opts.on('-s SERVER') { |server| $nats_server = server }
  opts.on('-t','--time') { $show_time = true }
  opts.on('-r','--raw') { $show_raw = true }
end
args = opts_parser.parse!(args)

subject, queue_group = args
usage unless subject and queue_group

def time_prefix
  "[#{Time.now}] " if $show_time
end

def header
  $i=0 unless $i
  "#{time_prefix}[\##{$i+=1}]"
end

def decorate sub, msg
  if $show_raw
    msg
  else
    "#{header} Received on [#{sub}] : '#{msg}'"
  end
end


NATS.on_error { |err| puts "Server Error: #{err}"; exit! }

NATS.start(:uri => $nats_server,  :autostart => true) do
  puts "Listening on [#{subject}], queue group [#{queue_group}]" unless $show_raw
  NATS.subscribe(subject, :queue => queue_group) { |msg, _, sub|
    puts decorate(sub, msg)
  }
end
